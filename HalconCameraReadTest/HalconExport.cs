//
// File generated by HDevelop for HALCON/.NET (C#) Version 17.12
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;
using HalconCameraReadTest;
using System.Drawing;
using System.Diagnostics;
using System.Drawing.Imaging;

public partial class HDevelopExport
{
    public HTuple hv_ExpDefaultWinHandle;

    // Local iconic variables 
    HObject ho_Image = null;

    // Local control variables 
    HTuple hv_AcqHandle = null;

    HTuple hv_Width, hv_Height;

    Stopwatch watch = new Stopwatch();

    public void InitHalcon()
    {
        // Default settings used in HDevelop 
        HOperatorSet.SetSystem("width", 512);
        HOperatorSet.SetSystem("height", 512);
    }


    // 摄像头初始化
    public void InitCamera(HTuple Window) 
    {
        hv_ExpDefaultWinHandle = Window;

        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Image);


        //Image Acquisition 01: Code generated by Image Acquisition 01
        // WebCam 笔记本摄像头
        HOperatorSet.OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb",
            -1, "false", "default", "[0] USB2.0 UVC HD Webcam", 0, -1, out hv_AcqHandle);

        //// 工业相机彩色
        //HOperatorSet.OpenFramegrabber("GigEVision2", 0, 0, 0, 0, 0, 0, "progressive",
        //-1, "default", -1, "false", "default", "b461037beacc_DO3THINK_GMT501", 0,
        //-1, out hv_AcqHandle);

        HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
    }

    // 图像抓取与显示
    /// <summary>
    /// 图像抓取与显示，Halcon窗体显示
    /// </summary>
    public void GrabFrameAndDisplay()
    {
        // 清除ho_image中的数据
        ho_Image.Dispose();

        // 采集图像
        HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);

        // 获取图像尺寸
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);

        // 调整图像的大小
        HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height - 1, hv_Width - 1);

        // 显示图像
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);

        // 转换为Bitmap格式测试
        //ConvertoBitmap(ho_Image, out img);

        //watch.Start();
        //img = Utils.ConvertHalconImageToBitmap(ho_Image,true);
        //watch.Stop();
        //Console.WriteLine("运行时间：" + watch.Elapsed);
    }



    // 图像抓取,返回Bitmap
    public void GrabFrame(out Bitmap img)
    {
        // 清除ho_image中的数据
        ho_Image.Dispose();

        // 采集图像
        HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);

        // 获取图像尺寸
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);

        // 转换为Bitmap格式测试
        ConvertoBitmap(ho_Image, out img);

        //watch.Start();
        //img = Utils.ConvertHalconImageToBitmap(ho_Image,true);
        //watch.Stop();
        //Console.WriteLine("运行时间：" + watch.Elapsed);
    }

    /// <summary>
    /// Halcon HObject格式转换为Bitmap格式
    /// 参考：https://www.mvtec.com/doc/halcon/13/en/interleave_channels.html
    /// </summary>
    /// <param name="ho_image"></param>
    /// <param name="img"></param>
    private void ConvertoBitmap(HObject ho_image, out Bitmap img)
    {
        // 转换Hobject至Bitmap格式
        //watch.Reset();
        //watch.Start();

        HTuple type, width, height;
        HImage himage = new HImage(ho_Image);
        HImage interleaved = himage.InterleaveChannels("argb", "match", 255);
        IntPtr ptr = interleaved.GetImagePointer1(out type, out width, out height);
        img = new Bitmap(width / 4, height, width, PixelFormat.Format32bppPArgb, ptr);

        //watch.Stop();
        //Console.WriteLine("运行时间：" + watch.Elapsed);
    }

    // 关闭相机
    public void closeCamera()
    {
        HOperatorSet.CloseFramegrabber(hv_AcqHandle);
        ho_Image.Dispose();
    }

}

